resolver kube-dns.kube-system.svc.cluster.local;
# resolver 1.1.1.1;

log_format rt_cache '$remote_addr - $upstream_cache_status [$time_local]  '
                    '"$request" $status $body_bytes_sent '
                    '"$http_referer" "$http_user_agent"';

access_log   /usr/local/openresty/nginx/logs/access.log rt_cache;

proxy_cache_path ~ levels=1:2 keys_zone=json_rpc_cache:50m max_size=1g inactive=60m use_temp_path=off;

server {
  listen 8080;
  default_type application/json;
  set $request_body_md5 "";
  rewrite_by_lua '
    local cjson = require "cjson"
    ngx.req.read_body()
    local body = ngx.req.get_body_data()
    ngx.log(ngx.WARN, "got body: ", body)
    if (body ~= nil) then
      local bodytable = cjson.decode(body)
      bodytable["id"] = 0
      bodytable = cjson.encode(bodytable)
      ngx.log(ngx.WARN, "got body: ", bodytable)
      ngx.var.request_body_md5 = ngx.md5(bodytable)
    else
      ngx.var.request_body_md5 = ngx.md5(body)
    end
    -- ngx.var.request_body_md5 = ngx.md5(body)   
  ';

  location /healthz {
    return 200 "healthy\n";
  }

  location / {
    proxy_cache json_rpc_cache;
    proxy_cache_methods POST;
    proxy_cache_key "$uri|$query_string|$request_body_md5";
    proxy_cache_min_uses 1;
    proxy_cache_lock on;
    proxy_cache_use_stale error timeout http_500 http_502 http_503 http_504;
    proxy_cache_valid 200 ${CACHE_TIME};

    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_ignore_headers Cache-Control;
    proxy_set_header Host ${ADDRESS};

    proxy_ssl_server_name on;
    set $upstream_address ${ADDRESS};
    proxy_pass https://$upstream_address:443;
  }
}
